{
  "name": "icecast",
  "description": "NodeJS module for parsing and/or injecting metadata with SHOUTcast/Icecast radio streams",
  "version": "1.1.0",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-icecast.git"
  },
  "keywords": [
    "shoutcast",
    "icecast",
    "radio",
    "internet",
    "metadata",
    "stream"
  ],
  "dependencies": {
    "debug": "*",
    "stream-parser": "*",
    "readable-stream": "*"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "main": "./index.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": "*"
  },
  "readme": "node-icecast\n============\n### NodeJS module for parsing and/or injecting metadata into SHOUTcast/Icecast radio streams\n\nThis module offers a `Reader` class for retrieving the raw audio data and\nparsing the metadata from a [SHOUTcast][] or [Icecast][] broadcast.\n\nThere's also a `Writer` class that allows you to inject your own metadata into a\ndata stream, which can then be displayed by another Icecast client (like VLC).\n\nBut you'll probably be most interested in the `Client` class that builds off of\nnode's core `http` module, except this version works with servers that return\nan **ICY** HTTP version, and automatically sends an \"Icy-MetaData: 1\" HTTP header\nto notify the server that we want metadata, and finally it returns a `Reader`\ninstance in the \"response\" event, therefore the \"res\" object also emits \"metadata\"\nevents. See the example below to see how it works.\n\nA good use case for this module is for HTML5 web apps that host to radio streams;\nthe `<audio>` tag doesn't know how to deal with the extra metadata and it is\nimpossible to extract (on the client-side). But a WebSocket connection could be\nused in conjunction with this module to provide those `metadata` events to a\nweb browser, for instance.\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install icecast\n```\n\n\nExample\n-------\n\nHere's a basic example of using the HTTP `Client` to connect to a remote Icecast\nstream, pipe the clean audio data to _stdout_, and print the HTTP response headers\nand metadata events to _stderr_:\n\n``` javascript\nvar icecast = require('icecast');\n\n// URL to a known Icecast stream\nvar url = 'http://radio.nugs.net:8002';\n\n// connect to the remote stream\nicecast.get(url, function (res) {\n\n  // log the HTTP response headers\n  console.error(res.headers);\n\n  // log any \"metadata\" events that happen\n  res.on('metadata', function (metadata) {\n    var parsed = icecast.parse(metadata);\n    console.error(parsed);\n  });\n\n  // pipe the audio data to `stdout`\n  res.pipe(process.stdout);\n});\n```\n\n\nAPI\n---\n\n### `Client` class\n\n### `Reader` class\n\n### `Writer` class\n\n### `request()` function\n\n### `get()` function\n\n### `parse()` function\n\n### `stringify()` function\n\n\n[NodeJS]: http://nodejs.org\n[Icecast]: http://icecast.org\n[SHOUTcast]: http://www.shoutcast.com\n",
  "readmeFilename": "README.md",
  "_id": "icecast@1.1.0",
  "dist": {
    "shasum": "b522005ebd708ba3656e03b530525c759497369e"
  },
  "_from": "icecast@",
  "_resolved": "https://registry.npmjs.org/icecast/-/icecast-1.1.0.tgz"
}
